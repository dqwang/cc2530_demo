###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2017  10:11:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\Source\SampleApp.c                     #
#    Command line       =  -f C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3 #
#                          .¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´« #
#                          ¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wEndev.cfg (-DCPU32MHZ -DROOT=__near_func          #
#                          -DBLINK_LEDS) -f C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\ #
#                          ´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈË #
#                          ÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Too #
#                          ls\CC2530DB\f8wConfig.cfg (-DSECURE=0              #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D     #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC C:\03-dd\zigbee\zigbee¿ª·¢ #
#                          °åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍ #
#                          ø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ -lA C:\03-dd\zigbee\zigbee¿ª·¢°åv #
#                          5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\1 #
#                          0.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3 #
#                          .¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´« #
#                          ¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\ -I                        #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\SOURCE\ -I                 #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I   #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ #
#                           -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\ #
#                          3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´ #
#                          «¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \HAL\INCLUDE\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\ #
#                          ´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈË #
#                          ÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\HAL\TARGET\CC2530EB\ -I              #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSA #
#                          L\MCU\CCSOC\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´ #
#                          úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌ #
#                          åºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\OSAL\INCLUDE\ -I                      #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\AF\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æ #
#                          ä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈ #
#                          ÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv #
#                          5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\1 #
#                          0.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SEC\ -I                    #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SAPI\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼ #
#                          °Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍ #
#                          âÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\STACK\SYS\ -I C:\03-dd\zigbee\zigbee¿ª·¢° #
#                          åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø #
#                          \10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\STACK\ZDO\ -I                  #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA #
#                          C\F8W\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æ #
#                          ä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈ #
#                          ÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´ #
#                          úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌ #
#                          åºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\SERVICES\SADDR\ -I                    #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SER #
#                          VICES\SDATA\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´ #
#                          úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌ #
#                          åºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\MAC\INCLUDE\ -I                       #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \HIGH_LEVEL\ -I C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´ #
#                          úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌ #
#                          åºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I               #
#                          C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB-Pro\List\SampleAp #
#                          p.lst                                              #
#    Object file        =  C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß #
#                          ¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ #
#                          ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\SampleApp #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\03-dd\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeĞ­ÒéÕ»Ó¦ÓÃÓë×éÍø\10.ÈËÌåºìÍâÈÈÊÍµç´«¸ĞÆ÷\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     82          #define DATA_PIN P0_6            //¶¨ÒåP0.6¿ÚÎª´«¸ĞÆ÷µÄÊäÈë¶Ë
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     98          {
     99            SAMPLEAPP_PERIODIC_CLUSTERID,
    100            SAMPLEAPP_FLASH_CLUSTERID
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    153          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          void SampleApp_SendPeriodicMessage( void );
    155          void SampleApp_SendFlashMessage( uint8 led_state );
    156          void SampleApp_Send_P2P_Message(void);
    157          
    158          //wdq
    159          void ir_state_scan(uint8 state, uint8 *buf);
    160          
    161          /*********************************************************************
    162           * NETWORK LAYER CALLBACKS
    163           */
    164          
    165          /*********************************************************************
    166           * PUBLIC FUNCTIONS
    167           */
    168          
    169          /*********************************************************************
    170           * @fn      SampleApp_Init
    171           *
    172           * @brief   Initialization function for the Generic App Task.
    173           *          This is called during initialization and should contain
    174           *          any application specific initialization (ie. hardware
    175           *          initialization/setup, table initialization, power up
    176           *          notificaiton ... ).
    177           *
    178           * @param   task_id - the ID assigned by OSAL.  This ID should be
    179           *                    used to send messages and set timers.
    180           *
    181           * @return  none
    182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    183          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    184          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    185            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    186            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    187            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    188            
    189            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    190            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    191            P0SEL &= ~0x40;                 //ÉèÖÃP0.6ÎªÆÕÍ¨IO¿Ú
   \   00001E   53F3BF       ANL     0xf3,#0xbf
    192            P0DIR &= ~0x40;                 //P0.6¶¨ÒåÎªÊäÈë¿Ú
   \   000021   53FDBF       ANL     0xfd,#0xbf
    193            
    194            // Device hardware initialization can be added here or in main() (Zmain.c).
    195            // If the hardware is application specific - add it here.
    196            // If the hardware is other parts of the device add it in main().
    197          
    198           #if defined ( BUILD_ALL_DEVICES )
    199            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    200            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    201            // together - if they are - we will start up a coordinator. Otherwise,
    202            // the device will start as a router.
    203            if ( readCoordinatorJumper() )
    204              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    205            else
    206              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    207          #endif // BUILD_ALL_DEVICES
    208          
    209          #if defined ( HOLD_AUTO_START )
    210            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    211            //  from starting the device and wait for the application to
    212            //  start the device.
    213            ZDOInitDevice(0);
    214          #endif
    215          
    216            // Setup for the periodic message's destination address
    217            // Broadcast to everyone
    218            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    220            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    221          
    222            // Setup for the flash command's destination address - Group 1
    223            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    225            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    226            
    227            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000049   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00004C   7402         MOV     A,#0x2
   \   00004E   F0           MOVX    @DPTR,A
    228            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    229            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øĞ­µ÷Æ÷
   \   000053   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    230          
    231            // Fill out the endpoint description.
    232            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    233            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.simpleDesc
    235                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    236            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    237          
    238            // Register the endpoint description with the AF
    239            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    240          
    241            // Register for all key events - This app will handle all key events
    242            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    243          
    244            // By default, all devices start out in Group 1
    245            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    246            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    247            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    248          
    249          #if defined ( LCD_SUPPORTED )
    250            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    251          #endif
    252          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BF                REQUIRE P0SEL
   \   0000BF                REQUIRE P0DIR
    253          
    254          /*********************************************************************
    255           * @fn      SampleApp_ProcessEvent
    256           *
    257           * @brief   Generic Application Task event processor.  This function
    258           *          is called to process all events for the task.  Events
    259           *          include timers, messages and any other user defined events.
    260           *
    261           * @param   task_id  - The OSAL assigned task ID.
    262           * @param   events - events to process.  This is a bit map and can
    263           *                   contain more than one event.
    264           *
    265           * @return  none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    268          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    269            afIncomingMSGPacket_t *MSGpkt;
    270            (void)task_id;  // Intentionally unreferenced parameter
    271          
    272            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    273            {
    274              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    275              while ( MSGpkt )
    276              {
    277                switch ( MSGpkt->hdr.event )
    278                {
    279                  // Received when a key is pressed
    280                  case KEY_CHANGE:
    281                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    282                    break;
    283          
    284                  // Received when a messages is received (OTA) for this endpoint
    285                  case AF_INCOMING_MSG_CMD:
    286                    SampleApp_MessageMSGCB( MSGpkt );
    287                    break;
    288          
    289                  // Received whenever the device changes state in the network
    290                  case ZDO_STATE_CHANGE:
    291                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    292                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    293                           (SampleApp_NwkState == DEV_ROUTER)
    294                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    295                    {
    296                      // Start sending the periodic message in a regular interval.
    297                      osal_start_timerEx( SampleApp_TaskID,
    298                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    299                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    300                    }
    301                    else
    302                    {
    303                      // Device is no longer in the network
    304                    }
    305                    break;
    306          
    307                  default:
    308                    break;
    309                }
    310          
    311                // Release the memory
    312                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    313          
    314                // Next - if one is available
    315                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    316              }
    317          
    318              // return unprocessed events
    319              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    320            }
    321          
    322            // Send a message out - This event is generated by a timer
    323            //  (setup in SampleApp_Init()).
    324            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    325            {
    326              // Send the periodic message
    327              //SampleApp_SendPeriodicMessage();
    328              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    329          
    330              // Setup to send message again in normal period (+ a little jitter)
    331              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    332                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    333          
    334              // return unprocessed events
    335              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    336            }
    337          
    338            // Discard unknown events
    339            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          }
    341          
    342          /*********************************************************************
    343           * Event Generation Functions
    344           */
    345          /*********************************************************************
    346           * @fn      SampleApp_HandleKeys
    347           *
    348           * @brief   Handles all key events for this device.
    349           *
    350           * @param   shift - true if in shift/alt.
    351           * @param   keys - bit field for key events. Valid entries:
    352           *                 HAL_KEY_SW_2
    353           *                 HAL_KEY_SW_1
    354           *
    355           * @return  none
    356           */
    357          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    358          static uint8 led_state = 1;
   \                     led_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for led_state>`
   \   000001                REQUIRE __INIT_XDATA_I
    359          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    361          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    362            (void)shift;  // Intentionally unreferenced parameter
    363            
    364            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5011         JNC     ??SampleApp_HandleKeys_0
    365            {
    366              /* This key sends the Flash Command is sent to Group 1.
    367               * This device will not receive the Flash Command from this
    368               * device (even if it belongs to group 1).
    369               */
    370          
    371          	led_state = !led_state;
   \   00000B   90....       MOV     DPTR,#led_state
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7004         JNZ     ??SampleApp_HandleKeys_1
   \   000011   7401         MOV     A,#0x1
   \   000013   8001         SJMP    ??SampleApp_HandleKeys_2
   \                     ??SampleApp_HandleKeys_1:
   \   000015   E4           CLR     A
   \                     ??SampleApp_HandleKeys_2:
   \   000016   F0           MOVX    @DPTR,A
    372              SampleApp_SendFlashMessage(led_state);
   \   000017                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    373            }
    374          
    375            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   00001C   EE           MOV     A,R6
   \   00001D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001F   5024         JNC     ??SampleApp_HandleKeys_3
    376            {
    377              /* The Flashr Command is sent to Group 1.
    378               * This key toggles this device in and out of group 1.
    379               * If this device doesn't belong to group 1, this application
    380               * will not receive the Flash command sent to group 1.
    381               */
    382              aps_Group_t *grp;
    383              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    384              if ( grp )
   \   000021                ; Setup parameters for call to function aps_FindGroup
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7B00         MOV     R3,#0x0
   \   000025   7914         MOV     R1,#0x14
   \   000027   12....       LCALL   ??aps_FindGroup?relay
   \   00002A   8B..         MOV     ?V0 + 1,R3
   \   00002C   EA           MOV     A,R2
   \   00002D   45..         ORL     A,?V0 + 1
   \   00002F   600B         JZ      ??SampleApp_HandleKeys_4
    385              {
    386                // Remove from the group
    387                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000031                ; Setup parameters for call to function aps_RemoveGroup
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7B00         MOV     R3,#0x0
   \   000035   7914         MOV     R1,#0x14
   \   000037   12....       LCALL   ??aps_RemoveGroup?relay
   \   00003A   8009         SJMP    ??SampleApp_HandleKeys_3
    388              }
    389              else
    390              {
    391                // Add to the flash group
    392                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_4:
   \   00003C                ; Setup parameters for call to function aps_AddGroup
   \   00003C   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000040   7914         MOV     R1,#0x14
   \   000042   12....       LCALL   ??aps_AddGroup?relay
    393              }
    394            }
    395          }
   \                     ??SampleApp_HandleKeys_3:
   \   000045   02....       LJMP    ??Subroutine4_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    396          
    397          /*********************************************************************
    398           * LOCAL FUNCTIONS
    399           */
    400          #define HEADER_MSB 0x55
    401          #define HEADER_LSB 0xAA
    402          #define TAIL_MSB 0X0D
    403          #define TAIL_LSB 0X0A
    404          
    405          
    406          #define CMD1_IR 0x01
    407          #define CMD2_LED 0x02
    408          
    409          #define IR_STATE_INSECURITY 1
    410          #define IR_STATE_SECURITY 0
    411          
    412          #define LED_ON 1
    413          #define LED_OFF 0
    414          
    415          
    416          typedef struct{
    417          	uint8 header[2];
    418          	uint8 cmd;
    419          	uint8 len;
    420          	uint8 data;
    421          	uint8 tail[2];
    422          }ir_t;
    423          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void ir_state_scan(uint8 state, uint8 *buf)
   \                     ir_state_scan:
    425          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    426          	  ir_t ir;
    427          	  
    428          	  ir.header[0]=HEADER_MSB;
    429          	  ir.header[1]=HEADER_LSB;
    430          
    431          	  ir.cmd = CMD1_IR;
    432          	  ir.len = 1;
    433          	  ir.data = state;
    434          	  
    435          	  ir.tail[0]= TAIL_MSB;
    436          	  ir.tail[1]= TAIL_LSB;
    437          
    438          	  buf[0]=ir.header[0];
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   7455         MOV     A,#0x55
   \   00000A   F0           MOVX    @DPTR,A
    439          	  buf[1]=ir.header[1];
   \   00000B   A3           INC     DPTR
   \   00000C   74AA         MOV     A,#-0x56
   \   00000E   F0           MOVX    @DPTR,A
    440          	  buf[2]=ir.cmd;
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?Subroutine3 & 0xFFFF
    441          	  buf[3]=ir.len;
   \                     ??CrossCallReturnLabel_4:
   \   00001A   F0           MOVX    @DPTR,A
    442          	  buf[4]=ir.data;
   \   00001B   E9           MOV     A,R1
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine1 & 0xFFFF
    443          	  buf[5]=ir.tail[0];
   \                     ??CrossCallReturnLabel_0:
   \   000027   740D         MOV     A,#0xd
   \   000029   12....       LCALL   ?Subroutine1 & 0xFFFF
    444          	  buf[6]=ir.tail[1];
   \                     ??CrossCallReturnLabel_1:
   \   00002C   A3           INC     DPTR
   \   00002D   740A         MOV     A,#0xa
   \   00002F   F0           MOVX    @DPTR,A
    445          }
   \   000030   D083         POP     DPH
   \   000032   D082         POP     DPL
   \   000034   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    446          
    447          /*********************************************************************
    448           * @fn      SampleApp_MessageMSGCB
    449           *
    450           * @brief   Data message processor callback.  This function processes
    451           *          any incoming data - probably from other devices.  So, based
    452           *          on cluster ID, perform the intended action.
    453           *
    454           * @param   none
    455           *
    456           * @return  none
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    459          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    460            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0200         DW        2
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_2
    461            {
    462              case SAMPLEAPP_P2P_CLUSTERID:
    463          
    464          	  #if 1
    465          
    466          	  HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000024                ; Setup parameters for call to function HalUARTWrite
   \   000024   EA           MOV     A,R2
   \   000025   241F         ADD     A,#0x1f
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   F583         MOV     DPH,A
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FD           MOV     R5,A
   \   000033   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000036   FA           MOV     R2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FB           MOV     R3,A
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    467          	  #else
    468          	  ir_t ir;
    469          	  uint8 buf[7];
    470          
    471          	  ir.header[0]=HEADER_MSB;
    472          	  ir.header[1]=HEADER_LSB;
    473          
    474          	  ir.cmd = CMD1_IR;
    475          	  ir.len = 1;
    476          	  
    477          	  osal_memcpy(&ir.data, pkt->cmd.Data, pkt->cmd.DataLength);
    478          	  ir.tail[0]= TAIL_MSB;
    479          	  ir.tail[1]= TAIL_LSB;
    480          
    481          	  buf[0]=ir.header[0];
    482          	  buf[1]=ir.header[1];
    483          	  buf[2]=ir.cmd;
    484          	  buf[3]=ir.len;
    485          	  buf[4]=ir.data;
    486          	  buf[5]=ir.tail[0];
    487          	  buf[6]=ir.tail[1];
    488          
    489          	  HalUARTWrite(0,buf,sizeof(buf));
    490          	  
    491          
    492          	 // #else
    493          	
    494                HalUARTWrite(0, "SR501:", 6);       //ÌáÊ¾½ÓÊÕµ½Êı¾İ
    495                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊı¾İ
    496                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ĞĞ
    497          
    498          	  #endif
    499          
    500          	  
    501                break;    
   \   00003F   8011         SJMP    ??SampleApp_MessageMSGCB_0
    502              case SAMPLEAPP_PERIODIC_CLUSTERID:
    503                break;
    504          
    505              case SAMPLEAPP_FLASH_CLUSTERID:
    506                //flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    507                //HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    508          
    509          	  HalLedOnOff(HAL_LED_4, (uint8)(pkt->cmd.Data[0]));
   \                     ??SampleApp_MessageMSGCB_1:
   \   000041                ; Setup parameters for call to function HalLedOnOff
   \   000041   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F583         MOV     DPH,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   7908         MOV     R1,#0x8
   \   00004F   12....       LCALL   ??HalLedOnOff?relay
    510          	  
    511                break;
    512            }
    513          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000052   02....       LJMP    ??Subroutine4_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    514          
    515          /*********************************************************************
    516           * @fn      SampleApp_SendPeriodicMessage
    517           *
    518           * @brief   Send the periodic message.
    519           *
    520           * @param   none
    521           *
    522           * @return  none
    523           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    524          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    525          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    526            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    527                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    528                                 1,
    529                                 (uint8*)&SampleAppPeriodicCounter,
    530                                 &SampleApp_TransID,
    531                                 AF_DISCV_ROUTE,
    532                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    533            {
    534            }
    535            else
    536            {
    537              // Error occurred in request to send.
    538            }
    539          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0
    540          
    541          /*********************************************************************
    542           * @fn      SampleApp_SendFlashMessage
    543           *
    544           * @brief   Send the flash message to group 1.
    545           *
    546           * @param   flashTime - in milliseconds
    547           *
    548           * @return  none
    549           */
    550          #if 0
    551          void SampleApp_SendFlashMessage( uint16 flashTime )
    552          {
    553            uint8 buffer[3];
    554            buffer[0] = (uint8)(SampleAppFlashCounter++);
    555            buffer[1] = LO_UINT16( flashTime );
    556            buffer[2] = HI_UINT16( flashTime );
    557          
    558            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    559                                 SAMPLEAPP_FLASH_CLUSTERID,
    560                                 3,
    561                                 buffer,
    562                                 &SampleApp_TransID,
    563                                 AF_DISCV_ROUTE,
    564                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    565            {
    566            }
    567            else
    568            {
    569              // Error occurred in request to send.
    570            }
    571          }
    572          
    573          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    574          void SampleApp_SendFlashMessage( uint8 led_state )
   \                     SampleApp_SendFlashMessage:
    575          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    576            uint8 buffer[1];
    577            buffer[0] = led_state;
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    578            
    579          
    580            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    581                                 SAMPLEAPP_FLASH_CLUSTERID,
    582                                 1,
    583                                 buffer,
    584                                 &SampleApp_TransID,
    585                                 AF_DISCV_ROUTE,
    586                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000012                ; Setup parameters for call to function AF_DataRequest
   \   000012   75..1E       MOV     ?V0 + 0,#0x1e
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001A   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00001D   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7403         MOV     A,#0x3
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   8582..       MOV     ?V0 + 0,DPL
   \   00002D   8583..       MOV     ?V0 + 1,DPH
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..01       MOV     ?V0 + 0,#0x1
   \   000038   75..00       MOV     ?V0 + 1,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..02       MOV     ?V0 + 0,#0x2
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7920         MOV     R1,#0x20
   \   00004A   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00004C   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00004E   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000050   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000052   12....       LCALL   ??AF_DataRequest?relay
   \   000055   7409         MOV     A,#0x9
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    587            {
    588            }
    589            else
    590            {
    591              // Error occurred in request to send.
    592            }
    593          }
   \   00005A   7401         MOV     A,#0x1
   \   00005C   02....       LJMP    ?Subroutine0 & 0xFFFF
    594          
    595          
    596          #endif
    597          
    598          /*********************************************************************
    599           * @fn      SampleApp_Send_P2P_Message
    600           *
    601           * @brief   point to point.
    602           *
    603           * @param   none
    604           *
    605           * @return  none
    606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    608          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    609            byte state;
    610            uint8 buf[7];
    611            
    612            if(DATA_PIN == 1)
   \   00000A   A286         MOV     C,0x80.6
   \   00000C   5022         JNC     ??SampleApp_Send_P2P_Message_0
    613            { 
    614              MicroWait (10000);     // Wait 10ms
   \   00000E                ; Setup parameters for call to function Onboard_wait
   \   00000E   7A10         MOV     R2,#0x10
   \   000010   7B27         MOV     R3,#0x27
   \   000012   12....       LCALL   ??Onboard_wait?relay
    615              if(DATA_PIN == 1)
   \   000015   A286         MOV     C,0x80.6
   \   000017   502F         JNC     ??SampleApp_Send_P2P_Message_1
    616              {     
    617                state = 0x01;       //ÓĞÈË½øÈë
   \   000019   7E01         MOV     R6,#0x1
    618                HalUARTWrite(0,"insecurity\n", 10);                //´®¿ÚÏÔÊ¾
   \   00001B                ; Setup parameters for call to function HalUARTWrite
   \   00001B   7C0A         MOV     R4,#0xa
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A..         MOV     R2,#`?<Constant "insecurity\\n">` & 0xff
   \   000021   7B..         MOV     R3,#(`?<Constant "insecurity\\n">` >> 8) & 0xff
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   ??HalUARTWrite?relay
    619                HalLcdWriteString( "insecurity", HAL_LCD_LINE_3 ); //LCDÏÔÊ¾ 
   \   000028                ; Setup parameters for call to function HalLcdWriteString
   \   000028   7903         MOV     R1,#0x3
   \   00002A   7A..         MOV     R2,#`?<Constant "insecurity">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "insecurity">` >> 8) & 0xff
   \   00002E   8015         SJMP    ??SampleApp_Send_P2P_Message_2
    620              }
    621            }  
    622            else 
    623            {  
    624              state = 0x00;      
   \                     ??SampleApp_Send_P2P_Message_0:
   \   000030   7E00         MOV     R6,#0x0
    625              HalUARTWrite(0,"security\n", 9);                     //´®¿ÚÏÔÊ¾
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C09         MOV     R4,#0x9
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "security\\n">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "security\\n">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    626              HalLcdWriteString( "security", HAL_LCD_LINE_3 );     //LCDÏÔÊ¾    
   \   00003F                ; Setup parameters for call to function HalLcdWriteString
   \   00003F   7903         MOV     R1,#0x3
   \   000041   7A..         MOV     R2,#`?<Constant "security">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "security">` >> 8) & 0xff
   \                     ??SampleApp_Send_P2P_Message_2:
   \   000045   12....       LCALL   ??HalLcdWriteString?relay
    627            }  
    628          
    629            ir_state_scan(state,buf);
   \                     ??SampleApp_Send_P2P_Message_1:
   \   000048                ; Setup parameters for call to function ir_state_scan
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   EE           MOV     A,R6
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??ir_state_scan?relay
    630          
    631            
    632            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    633                                 SAMPLEAPP_P2P_CLUSTERID,
    634                                 sizeof(buf),
    635                                 buf,
    636                                 &SampleApp_TransID,
    637                                 AF_DISCV_ROUTE,
    638                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000057                ; Setup parameters for call to function AF_DataRequest
   \   000057   75..1E       MOV     ?V0 + 0,#0x1e
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000062   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   8582..       MOV     ?V0 + 0,DPL
   \   000072   8583..       MOV     ?V0 + 1,DPH
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   75..07       MOV     ?V0 + 0,#0x7
   \   00007D   75..00       MOV     ?V0 + 1,#0x0
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   75..04       MOV     ?V0 + 0,#0x4
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7920         MOV     R1,#0x20
   \   00008F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000091   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000093   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000095   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000097   12....       LCALL   ??AF_DataRequest?relay
   \   00009A   7409         MOV     A,#0x9
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    639            {
    640            }
    641            else
    642            {
    643              // Error occurred in request to send.
    644            }
    645          }
   \   00009F   7407         MOV     A,#0x7
   \   0000A1                REQUIRE ?Subroutine0
   \   0000A1                REQUIRE _A_P0
   \   0000A1                ; // Fall through to label ?Subroutine0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for led_state>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ir_state_scan?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ir_state_scan

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "insecurity\\n">`:
   \   000000   696E7365     DB "insecurity\012"
   \            63757269
   \            74790A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "insecurity">`:
   \   000000   696E7365     DB "insecurity"
   \            63757269
   \            747900  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "security\\n">`:
   \   000000   73656375     DB "security\012"
   \            72697479
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "security">`:
   \   000000   73656375     DB "security"
   \            72697479
   \            00      
    646          /*********************************************************************
    647          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalLedOnOff                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     30
       -> AF_DataRequest                0      0     40
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         0      0     38
       -> Onboard_wait                  0      0     34
       -> HalUARTWrite                  0      0     34
       -> HalLcdWriteString             0      0     34
       -> HalUARTWrite                  0      0     34
       -> HalLcdWriteString             0      0     34
       -> ir_state_scan                 0      0     34
       -> AF_DataRequest                0      0     52
     ir_state_scan                      3      0     17


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     P0SEL                                    1
     P0DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         191
     SampleApp_ProcessEvent                 176
     led_state                                1
     SampleApp_HandleKeys                    72
     ??Subroutine4_0                          5
     ir_state_scan                           55
     ?Subroutine1                             6
     ?Subroutine3                             9
     SampleApp_MessageMSGCB                  85
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage           69
     ?Subroutine0                             3
     SampleApp_SendFlashMessage              95
     SampleApp_Send_P2P_Message             161
     ?<Initializer for led_state>             1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??ir_state_scan?relay                    6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "insecurity\n">              12
     ?<Constant "insecurity">                11
     ?<Constant "security\n">                10
     ?<Constant "security">                   9

 
 939 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  76 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 988 bytes of CODE  memory
  76 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  66 bytes of XDATA memory

Errors: none
Warnings: none
